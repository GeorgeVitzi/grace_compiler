State 126 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: func-def

    2 func-def: header local-deff block
    3         | header block

    4 local-deff: local-def
    5           | local-deff local-def

    6 local-def: func-def
    7          | func-decl
    8          | var-def

    9 header: "fun" T_id '(' ')' ':' data-type
   10       | "fun" T_id '(' fpar-def ')' ':' data-type

   11 fpar-def: T_id ':' fpar-type ';' fpar-def
   12         | T_id ':' fpar-type
   13         | T_id new-def ':' fpar-type ';' fpar-def
   14         | T_id new-def ':' fpar-type
   15         | "ref" T_id ':' fpar-type ';' fpar-def
   16         | "ref" T_id ':' fpar-type
   17         | "ref" T_id new-def ':' fpar-type ';' fpar-def
   18         | "ref" T_id new-def ':' fpar-type

   19 new-def: ',' T_id
   20        | ',' T_id new-def

   21 data-type: "int"
   22          | "char"
   23          | "nothing"

   24 declaration: data-type box
   25            | data-type

   26 box: '[' T_const ']' box
   27    | '[' T_const ']'

   28 fpar-type: data-type '[' ']' box
   29          | data-type '[' ']'
   30          | data-type box
   31          | data-type

   32 func-decl: header ';'

   33 var-def: "var" T_id new-def ':' declaration ';'
   34        | "var" T_id ':' declaration ';'

   35 stmt: ';'
   36     | l-value "<-" expr ';'
   37     | block
   38     | func-call ';'
   39     | "if" cond "then" stmt
   40     | "if" cond "then" stmt "else" stmt
   41     | "while" cond "do" stmt
   42     | "return" ';'
   43     | "return" expr ';'

   44 block: '{' sol '}'
   45      | '{' '}'

   46 sol: stmt
   47    | sol stmt

   48 func-call: T_id '(' ')'
   49          | T_id '(' expr komma ')'
   50          | T_id '(' expr ')'

   51 komma: ',' expr
   52      | ',' expr komma

   53 l-value: T_id
   54        | T_string
   55        | l-value '[' expr ']'

   56 expr: T_charr
   57     | T_charra
   58     | T_const
   59     | l-value
   60     | '(' expr ')'
   61     | '+' expr
   62     | '-' expr
   63     | func-call
   64     | expr '+' expr
   65     | expr '-' expr
   66     | expr '*' expr
   67     | expr "div" expr
   68     | expr "mod" expr

   69 cond: '(' cond ')'
   70     | "not" cond
   71     | cond "and" cond
   72     | cond "or" cond
   73     | expr '=' expr
   74     | expr '#' expr
   75     | expr '<' expr
   76     | expr '>' expr
   77     | expr "<=" expr
   78     | expr ">=" expr


Terminals, with rules where they appear

    $end (0) 0
    '#' <op> (35) 74
    '(' (40) 9 10 48 49 50 60 69
    ')' (41) 9 10 48 49 50 60 69
    '*' <op> (42) 66
    '+' <op> (43) 61 64
    ',' (44) 19 20 51 52
    '-' <op> (45) 62 65
    ':' (58) 9 10 11 12 13 14 15 16 17 18 33 34
    ';' (59) 11 13 15 17 32 33 34 35 36 38 42 43
    '<' <op> (60) 75
    '=' <op> (61) 73
    '>' <op> (62) 76
    '[' (91) 26 27 28 29 55
    ']' (93) 26 27 28 29 55
    '{' (123) 44 45
    '}' (125) 44 45
    error (256)
    "and" <op> (258) 71
    "char" (259) 22
    "div" <op> (260) 67
    "do" (261) 41
    "else" (262) 40
    "fun" (263) 9 10
    "if" (264) 39 40
    "int" (265) 21
    "mod" <op> (266) 68
    "not" <op> (267) 70
    "nothing" (268) 23
    "or" <op> (269) 72
    "ref" (270) 15 16 17 18
    "return" (271) 42 43
    "then" (272) 39 40
    "var" (273) 33 34
    "while" (274) 41
    "<-" (275) 36
    "<=" <op> (276) 77
    ">=" <op> (277) 78
    T_id <RepString> (278) 9 10 11 12 13 14 15 16 17 18 19 20 33 34 48 49 50 53
    T_const <num> (279) 26 27 58
    T_charra <varr> (280) 57
    T_charr <var> (281) 56
    T_string <RepString> (282) 54


Nonterminals, with rules where they appear

    $accept (44)
        on left: 0
    program (45)
        on left: 1
        on right: 0
    func-def <funcdef> (46)
        on left: 2 3
        on right: 1 6
    local-deff <localdeff> (47)
        on left: 4 5
        on right: 2 5
    local-def <localdef> (48)
        on left: 6 7 8
        on right: 4 5
    header <head> (49)
        on left: 9 10
        on right: 2 3 32
    fpar-def <fpardef> (50)
        on left: 11 12 13 14 15 16 17 18
        on right: 10 11 13 15 17
    new-def <newdef> (51)
        on left: 19 20
        on right: 13 14 17 18 20 33
    data-type <type> (52)
        on left: 21 22 23
        on right: 9 10 24 25 28 29 30 31
    declaration <decl> (53)
        on left: 24 25
        on right: 33 34
    box <vox> (54)
        on left: 26 27
        on right: 24 26 28 30
    fpar-type <fpartype> (55)
        on left: 28 29 30 31
        on right: 11 12 13 14 15 16 17 18
    func-decl <funcdecl> (56)
        on left: 32
        on right: 7
    var-def <vardef> (57)
        on left: 33 34
        on right: 8
    stmt <stmts> (58)
        on left: 35 36 37 38 39 40 41 42 43
        on right: 39 40 41 46 47
    block <blocks> (59)
        on left: 44 45
        on right: 2 3 37
    sol <soll> (60)
        on left: 46 47
        on right: 44 47
    func-call <funccall> (61)
        on left: 48 49 50
        on right: 38 63
    komma <comma> (62)
        on left: 51 52
        on right: 49 52
    l-value <lvalue> (63)
        on left: 53 54 55
        on right: 36 55 59
    expr <exprs> (64)
        on left: 56 57 58 59 60 61 62 63 64 65 66 67 68
        on right: 36 43 49 50 51 52 55 60 61 62 64 65 66 67 68 73 74 75 76 77 78
    cond <conds> (65)
        on left: 69 70 71 72 73 74 75 76 77 78
        on right: 39 40 41 69 70 71 72


State 0

    0 $accept: • program $end

    "fun"  shift, and go to state 1

    program   go to state 2
    func-def  go to state 3
    header    go to state 4


State 1

    9 header: "fun" • T_id '(' ')' ':' data-type
   10       | "fun" • T_id '(' fpar-def ')' ':' data-type

    T_id  shift, and go to state 5


State 2

    0 $accept: program • $end

    $end  shift, and go to state 6


State 3

    1 program: func-def •

    $default  reduce using rule 1 (program)


State 4

    2 func-def: header • local-deff block
    3         | header • block

    "fun"  shift, and go to state 1
    "var"  shift, and go to state 7
    '{'    shift, and go to state 8

    func-def    go to state 9
    local-deff  go to state 10
    local-def   go to state 11
    header      go to state 12
    func-decl   go to state 13
    var-def     go to state 14
    block       go to state 15


State 5

    9 header: "fun" T_id • '(' ')' ':' data-type
   10       | "fun" T_id • '(' fpar-def ')' ':' data-type

    '('  shift, and go to state 16


State 6

    0 $accept: program $end •

    $default  accept


State 7

   33 var-def: "var" • T_id new-def ':' declaration ';'
   34        | "var" • T_id ':' declaration ';'

    T_id  shift, and go to state 17


State 8

   44 block: '{' • sol '}'
   45      | '{' • '}'

    "if"      shift, and go to state 18
    "return"  shift, and go to state 19
    "while"   shift, and go to state 20
    T_id      shift, and go to state 21
    T_string  shift, and go to state 22
    ';'       shift, and go to state 23
    '{'       shift, and go to state 8
    '}'       shift, and go to state 24

    stmt       go to state 25
    block      go to state 26
    sol        go to state 27
    func-call  go to state 28
    l-value    go to state 29


State 9

    6 local-def: func-def •

    $default  reduce using rule 6 (local-def)


State 10

    2 func-def: header local-deff • block
    5 local-deff: local-deff • local-def

    "fun"  shift, and go to state 1
    "var"  shift, and go to state 7
    '{'    shift, and go to state 8

    func-def   go to state 9
    local-def  go to state 30
    header     go to state 12
    func-decl  go to state 13
    var-def    go to state 14
    block      go to state 31


State 11

    4 local-deff: local-def •

    $default  reduce using rule 4 (local-deff)


State 12

    2 func-def: header • local-deff block
    3         | header • block
   32 func-decl: header • ';'

    "fun"  shift, and go to state 1
    "var"  shift, and go to state 7
    ';'    shift, and go to state 32
    '{'    shift, and go to state 8

    func-def    go to state 9
    local-deff  go to state 10
    local-def   go to state 11
    header      go to state 12
    func-decl   go to state 13
    var-def     go to state 14
    block       go to state 15


State 13

    7 local-def: func-decl •

    $default  reduce using rule 7 (local-def)


State 14

    8 local-def: var-def •

    $default  reduce using rule 8 (local-def)


State 15

    3 func-def: header block •

    $default  reduce using rule 3 (func-def)


State 16

    9 header: "fun" T_id '(' • ')' ':' data-type
   10       | "fun" T_id '(' • fpar-def ')' ':' data-type

    "ref"  shift, and go to state 33
    T_id   shift, and go to state 34
    ')'    shift, and go to state 35

    fpar-def  go to state 36


State 17

   33 var-def: "var" T_id • new-def ':' declaration ';'
   34        | "var" T_id • ':' declaration ';'

    ':'  shift, and go to state 37
    ','  shift, and go to state 38

    new-def  go to state 39


State 18

   39 stmt: "if" • cond "then" stmt
   40     | "if" • cond "then" stmt "else" stmt

    "not"     shift, and go to state 40
    T_id      shift, and go to state 21
    T_const   shift, and go to state 41
    T_charra  shift, and go to state 42
    T_charr   shift, and go to state 43
    T_string  shift, and go to state 22
    '+'       shift, and go to state 44
    '-'       shift, and go to state 45
    '('       shift, and go to state 46

    func-call  go to state 47
    l-value    go to state 48
    expr       go to state 49
    cond       go to state 50


State 19

   42 stmt: "return" • ';'
   43     | "return" • expr ';'

    T_id      shift, and go to state 21
    T_const   shift, and go to state 41
    T_charra  shift, and go to state 42
    T_charr   shift, and go to state 43
    T_string  shift, and go to state 22
    '+'       shift, and go to state 44
    '-'       shift, and go to state 45
    '('       shift, and go to state 51
    ';'       shift, and go to state 52

    func-call  go to state 47
    l-value    go to state 48
    expr       go to state 53


State 20

   41 stmt: "while" • cond "do" stmt

    "not"     shift, and go to state 40
    T_id      shift, and go to state 21
    T_const   shift, and go to state 41
    T_charra  shift, and go to state 42
    T_charr   shift, and go to state 43
    T_string  shift, and go to state 22
    '+'       shift, and go to state 44
    '-'       shift, and go to state 45
    '('       shift, and go to state 46

    func-call  go to state 47
    l-value    go to state 48
    expr       go to state 49
    cond       go to state 54


State 21

   48 func-call: T_id • '(' ')'
   49          | T_id • '(' expr komma ')'
   50          | T_id • '(' expr ')'
   53 l-value: T_id •

    '('  shift, and go to state 55

    $default  reduce using rule 53 (l-value)


State 22

   54 l-value: T_string •

    $default  reduce using rule 54 (l-value)


State 23

   35 stmt: ';' •

    $default  reduce using rule 35 (stmt)


State 24

   45 block: '{' '}' •

    $default  reduce using rule 45 (block)


State 25

   46 sol: stmt •

    $default  reduce using rule 46 (sol)


State 26

   37 stmt: block •

    $default  reduce using rule 37 (stmt)


State 27

   44 block: '{' sol • '}'
   47 sol: sol • stmt

    "if"      shift, and go to state 18
    "return"  shift, and go to state 19
    "while"   shift, and go to state 20
    T_id      shift, and go to state 21
    T_string  shift, and go to state 22
    ';'       shift, and go to state 23
    '{'       shift, and go to state 8
    '}'       shift, and go to state 56

    stmt       go to state 57
    block      go to state 26
    func-call  go to state 28
    l-value    go to state 29


State 28

   38 stmt: func-call • ';'

    ';'  shift, and go to state 58


State 29

   36 stmt: l-value • "<-" expr ';'
   55 l-value: l-value • '[' expr ']'

    "<-"  shift, and go to state 59
    '['   shift, and go to state 60


State 30

    5 local-deff: local-deff local-def •

    $default  reduce using rule 5 (local-deff)


State 31

    2 func-def: header local-deff block •

    $default  reduce using rule 2 (func-def)


State 32

   32 func-decl: header ';' •

    $default  reduce using rule 32 (func-decl)


State 33

   15 fpar-def: "ref" • T_id ':' fpar-type ';' fpar-def
   16         | "ref" • T_id ':' fpar-type
   17         | "ref" • T_id new-def ':' fpar-type ';' fpar-def
   18         | "ref" • T_id new-def ':' fpar-type

    T_id  shift, and go to state 61


State 34

   11 fpar-def: T_id • ':' fpar-type ';' fpar-def
   12         | T_id • ':' fpar-type
   13         | T_id • new-def ':' fpar-type ';' fpar-def
   14         | T_id • new-def ':' fpar-type

    ':'  shift, and go to state 62
    ','  shift, and go to state 38

    new-def  go to state 63


State 35

    9 header: "fun" T_id '(' ')' • ':' data-type

    ':'  shift, and go to state 64


State 36

   10 header: "fun" T_id '(' fpar-def • ')' ':' data-type

    ')'  shift, and go to state 65


State 37

   34 var-def: "var" T_id ':' • declaration ';'

    "char"     shift, and go to state 66
    "int"      shift, and go to state 67
    "nothing"  shift, and go to state 68

    data-type    go to state 69
    declaration  go to state 70


State 38

   19 new-def: ',' • T_id
   20        | ',' • T_id new-def

    T_id  shift, and go to state 71


State 39

   33 var-def: "var" T_id new-def • ':' declaration ';'

    ':'  shift, and go to state 72


State 40

   70 cond: "not" • cond

    "not"     shift, and go to state 40
    T_id      shift, and go to state 21
    T_const   shift, and go to state 41
    T_charra  shift, and go to state 42
    T_charr   shift, and go to state 43
    T_string  shift, and go to state 22
    '+'       shift, and go to state 44
    '-'       shift, and go to state 45
    '('       shift, and go to state 46

    func-call  go to state 47
    l-value    go to state 48
    expr       go to state 49
    cond       go to state 73


State 41

   58 expr: T_const •

    $default  reduce using rule 58 (expr)


State 42

   57 expr: T_charra •

    $default  reduce using rule 57 (expr)


State 43

   56 expr: T_charr •

    $default  reduce using rule 56 (expr)


State 44

   61 expr: '+' • expr

    T_id      shift, and go to state 21
    T_const   shift, and go to state 41
    T_charra  shift, and go to state 42
    T_charr   shift, and go to state 43
    T_string  shift, and go to state 22
    '+'       shift, and go to state 44
    '-'       shift, and go to state 45
    '('       shift, and go to state 51

    func-call  go to state 47
    l-value    go to state 48
    expr       go to state 74


State 45

   62 expr: '-' • expr

    T_id      shift, and go to state 21
    T_const   shift, and go to state 41
    T_charra  shift, and go to state 42
    T_charr   shift, and go to state 43
    T_string  shift, and go to state 22
    '+'       shift, and go to state 44
    '-'       shift, and go to state 45
    '('       shift, and go to state 51

    func-call  go to state 47
    l-value    go to state 48
    expr       go to state 75


State 46

   60 expr: '(' • expr ')'
   69 cond: '(' • cond ')'

    "not"     shift, and go to state 40
    T_id      shift, and go to state 21
    T_const   shift, and go to state 41
    T_charra  shift, and go to state 42
    T_charr   shift, and go to state 43
    T_string  shift, and go to state 22
    '+'       shift, and go to state 44
    '-'       shift, and go to state 45
    '('       shift, and go to state 46

    func-call  go to state 47
    l-value    go to state 48
    expr       go to state 76
    cond       go to state 77


State 47

   63 expr: func-call •

    $default  reduce using rule 63 (expr)


State 48

   55 l-value: l-value • '[' expr ']'
   59 expr: l-value •

    '['  shift, and go to state 60

    $default  reduce using rule 59 (expr)


State 49

   64 expr: expr • '+' expr
   65     | expr • '-' expr
   66     | expr • '*' expr
   67     | expr • "div" expr
   68     | expr • "mod" expr
   73 cond: expr • '=' expr
   74     | expr • '#' expr
   75     | expr • '<' expr
   76     | expr • '>' expr
   77     | expr • "<=" expr
   78     | expr • ">=" expr

    "div"  shift, and go to state 78
    "mod"  shift, and go to state 79
    "<="   shift, and go to state 80
    ">="   shift, and go to state 81
    '='    shift, and go to state 82
    '#'    shift, and go to state 83
    '>'    shift, and go to state 84
    '<'    shift, and go to state 85
    '+'    shift, and go to state 86
    '-'    shift, and go to state 87
    '*'    shift, and go to state 88


State 50

   39 stmt: "if" cond • "then" stmt
   40     | "if" cond • "then" stmt "else" stmt
   71 cond: cond • "and" cond
   72     | cond • "or" cond

    "and"   shift, and go to state 89
    "or"    shift, and go to state 90
    "then"  shift, and go to state 91


State 51

   60 expr: '(' • expr ')'

    T_id      shift, and go to state 21
    T_const   shift, and go to state 41
    T_charra  shift, and go to state 42
    T_charr   shift, and go to state 43
    T_string  shift, and go to state 22
    '+'       shift, and go to state 44
    '-'       shift, and go to state 45
    '('       shift, and go to state 51

    func-call  go to state 47
    l-value    go to state 48
    expr       go to state 92


State 52

   42 stmt: "return" ';' •

    $default  reduce using rule 42 (stmt)


State 53

   43 stmt: "return" expr • ';'
   64 expr: expr • '+' expr
   65     | expr • '-' expr
   66     | expr • '*' expr
   67     | expr • "div" expr
   68     | expr • "mod" expr

    "div"  shift, and go to state 78
    "mod"  shift, and go to state 79
    '+'    shift, and go to state 86
    '-'    shift, and go to state 87
    '*'    shift, and go to state 88
    ';'    shift, and go to state 93


State 54

   41 stmt: "while" cond • "do" stmt
   71 cond: cond • "and" cond
   72     | cond • "or" cond

    "and"  shift, and go to state 89
    "do"   shift, and go to state 94
    "or"   shift, and go to state 90


State 55

   48 func-call: T_id '(' • ')'
   49          | T_id '(' • expr komma ')'
   50          | T_id '(' • expr ')'

    T_id      shift, and go to state 21
    T_const   shift, and go to state 41
    T_charra  shift, and go to state 42
    T_charr   shift, and go to state 43
    T_string  shift, and go to state 22
    '+'       shift, and go to state 44
    '-'       shift, and go to state 45
    '('       shift, and go to state 51
    ')'       shift, and go to state 95

    func-call  go to state 47
    l-value    go to state 48
    expr       go to state 96


State 56

   44 block: '{' sol '}' •

    $default  reduce using rule 44 (block)


State 57

   47 sol: sol stmt •

    $default  reduce using rule 47 (sol)


State 58

   38 stmt: func-call ';' •

    $default  reduce using rule 38 (stmt)


State 59

   36 stmt: l-value "<-" • expr ';'

    T_id      shift, and go to state 21
    T_const   shift, and go to state 41
    T_charra  shift, and go to state 42
    T_charr   shift, and go to state 43
    T_string  shift, and go to state 22
    '+'       shift, and go to state 44
    '-'       shift, and go to state 45
    '('       shift, and go to state 51

    func-call  go to state 47
    l-value    go to state 48
    expr       go to state 97


State 60

   55 l-value: l-value '[' • expr ']'

    T_id      shift, and go to state 21
    T_const   shift, and go to state 41
    T_charra  shift, and go to state 42
    T_charr   shift, and go to state 43
    T_string  shift, and go to state 22
    '+'       shift, and go to state 44
    '-'       shift, and go to state 45
    '('       shift, and go to state 51

    func-call  go to state 47
    l-value    go to state 48
    expr       go to state 98


State 61

   15 fpar-def: "ref" T_id • ':' fpar-type ';' fpar-def
   16         | "ref" T_id • ':' fpar-type
   17         | "ref" T_id • new-def ':' fpar-type ';' fpar-def
   18         | "ref" T_id • new-def ':' fpar-type

    ':'  shift, and go to state 99
    ','  shift, and go to state 38

    new-def  go to state 100


State 62

   11 fpar-def: T_id ':' • fpar-type ';' fpar-def
   12         | T_id ':' • fpar-type

    "char"     shift, and go to state 66
    "int"      shift, and go to state 67
    "nothing"  shift, and go to state 68

    data-type  go to state 101
    fpar-type  go to state 102


State 63

   13 fpar-def: T_id new-def • ':' fpar-type ';' fpar-def
   14         | T_id new-def • ':' fpar-type

    ':'  shift, and go to state 103


State 64

    9 header: "fun" T_id '(' ')' ':' • data-type

    "char"     shift, and go to state 66
    "int"      shift, and go to state 67
    "nothing"  shift, and go to state 68

    data-type  go to state 104


State 65

   10 header: "fun" T_id '(' fpar-def ')' • ':' data-type

    ':'  shift, and go to state 105


State 66

   22 data-type: "char" •

    $default  reduce using rule 22 (data-type)


State 67

   21 data-type: "int" •

    $default  reduce using rule 21 (data-type)


State 68

   23 data-type: "nothing" •

    $default  reduce using rule 23 (data-type)


State 69

   24 declaration: data-type • box
   25            | data-type •

    '['  shift, and go to state 106

    $default  reduce using rule 25 (declaration)

    box  go to state 107


State 70

   34 var-def: "var" T_id ':' declaration • ';'

    ';'  shift, and go to state 108


State 71

   19 new-def: ',' T_id •
   20        | ',' T_id • new-def

    ','  shift, and go to state 38

    $default  reduce using rule 19 (new-def)

    new-def  go to state 109


State 72

   33 var-def: "var" T_id new-def ':' • declaration ';'

    "char"     shift, and go to state 66
    "int"      shift, and go to state 67
    "nothing"  shift, and go to state 68

    data-type    go to state 69
    declaration  go to state 110


State 73

   70 cond: "not" cond •
   71     | cond • "and" cond
   72     | cond • "or" cond

    $default  reduce using rule 70 (cond)


State 74

   61 expr: '+' expr •
   64     | expr • '+' expr
   65     | expr • '-' expr
   66     | expr • '*' expr
   67     | expr • "div" expr
   68     | expr • "mod" expr

    "div"  shift, and go to state 78
    "mod"  shift, and go to state 79
    '*'    shift, and go to state 88

    $default  reduce using rule 61 (expr)


State 75

   62 expr: '-' expr •
   64     | expr • '+' expr
   65     | expr • '-' expr
   66     | expr • '*' expr
   67     | expr • "div" expr
   68     | expr • "mod" expr

    "div"  shift, and go to state 78
    "mod"  shift, and go to state 79
    '*'    shift, and go to state 88

    $default  reduce using rule 62 (expr)


State 76

   60 expr: '(' expr • ')'
   64     | expr • '+' expr
   65     | expr • '-' expr
   66     | expr • '*' expr
   67     | expr • "div" expr
   68     | expr • "mod" expr
   73 cond: expr • '=' expr
   74     | expr • '#' expr
   75     | expr • '<' expr
   76     | expr • '>' expr
   77     | expr • "<=" expr
   78     | expr • ">=" expr

    "div"  shift, and go to state 78
    "mod"  shift, and go to state 79
    "<="   shift, and go to state 80
    ">="   shift, and go to state 81
    '='    shift, and go to state 82
    '#'    shift, and go to state 83
    '>'    shift, and go to state 84
    '<'    shift, and go to state 85
    '+'    shift, and go to state 86
    '-'    shift, and go to state 87
    '*'    shift, and go to state 88
    ')'    shift, and go to state 111


State 77

   69 cond: '(' cond • ')'
   71     | cond • "and" cond
   72     | cond • "or" cond

    "and"  shift, and go to state 89
    "or"   shift, and go to state 90
    ')'    shift, and go to state 112


State 78

   67 expr: expr "div" • expr

    T_id      shift, and go to state 21
    T_const   shift, and go to state 41
    T_charra  shift, and go to state 42
    T_charr   shift, and go to state 43
    T_string  shift, and go to state 22
    '+'       shift, and go to state 44
    '-'       shift, and go to state 45
    '('       shift, and go to state 51

    func-call  go to state 47
    l-value    go to state 48
    expr       go to state 113


State 79

   68 expr: expr "mod" • expr

    T_id      shift, and go to state 21
    T_const   shift, and go to state 41
    T_charra  shift, and go to state 42
    T_charr   shift, and go to state 43
    T_string  shift, and go to state 22
    '+'       shift, and go to state 44
    '-'       shift, and go to state 45
    '('       shift, and go to state 51

    func-call  go to state 47
    l-value    go to state 48
    expr       go to state 114


State 80

   77 cond: expr "<=" • expr

    T_id      shift, and go to state 21
    T_const   shift, and go to state 41
    T_charra  shift, and go to state 42
    T_charr   shift, and go to state 43
    T_string  shift, and go to state 22
    '+'       shift, and go to state 44
    '-'       shift, and go to state 45
    '('       shift, and go to state 51

    func-call  go to state 47
    l-value    go to state 48
    expr       go to state 115


State 81

   78 cond: expr ">=" • expr

    T_id      shift, and go to state 21
    T_const   shift, and go to state 41
    T_charra  shift, and go to state 42
    T_charr   shift, and go to state 43
    T_string  shift, and go to state 22
    '+'       shift, and go to state 44
    '-'       shift, and go to state 45
    '('       shift, and go to state 51

    func-call  go to state 47
    l-value    go to state 48
    expr       go to state 116


State 82

   73 cond: expr '=' • expr

    T_id      shift, and go to state 21
    T_const   shift, and go to state 41
    T_charra  shift, and go to state 42
    T_charr   shift, and go to state 43
    T_string  shift, and go to state 22
    '+'       shift, and go to state 44
    '-'       shift, and go to state 45
    '('       shift, and go to state 51

    func-call  go to state 47
    l-value    go to state 48
    expr       go to state 117


State 83

   74 cond: expr '#' • expr

    T_id      shift, and go to state 21
    T_const   shift, and go to state 41
    T_charra  shift, and go to state 42
    T_charr   shift, and go to state 43
    T_string  shift, and go to state 22
    '+'       shift, and go to state 44
    '-'       shift, and go to state 45
    '('       shift, and go to state 51

    func-call  go to state 47
    l-value    go to state 48
    expr       go to state 118


State 84

   76 cond: expr '>' • expr

    T_id      shift, and go to state 21
    T_const   shift, and go to state 41
    T_charra  shift, and go to state 42
    T_charr   shift, and go to state 43
    T_string  shift, and go to state 22
    '+'       shift, and go to state 44
    '-'       shift, and go to state 45
    '('       shift, and go to state 51

    func-call  go to state 47
    l-value    go to state 48
    expr       go to state 119


State 85

   75 cond: expr '<' • expr

    T_id      shift, and go to state 21
    T_const   shift, and go to state 41
    T_charra  shift, and go to state 42
    T_charr   shift, and go to state 43
    T_string  shift, and go to state 22
    '+'       shift, and go to state 44
    '-'       shift, and go to state 45
    '('       shift, and go to state 51

    func-call  go to state 47
    l-value    go to state 48
    expr       go to state 120


State 86

   64 expr: expr '+' • expr

    T_id      shift, and go to state 21
    T_const   shift, and go to state 41
    T_charra  shift, and go to state 42
    T_charr   shift, and go to state 43
    T_string  shift, and go to state 22
    '+'       shift, and go to state 44
    '-'       shift, and go to state 45
    '('       shift, and go to state 51

    func-call  go to state 47
    l-value    go to state 48
    expr       go to state 121


State 87

   65 expr: expr '-' • expr

    T_id      shift, and go to state 21
    T_const   shift, and go to state 41
    T_charra  shift, and go to state 42
    T_charr   shift, and go to state 43
    T_string  shift, and go to state 22
    '+'       shift, and go to state 44
    '-'       shift, and go to state 45
    '('       shift, and go to state 51

    func-call  go to state 47
    l-value    go to state 48
    expr       go to state 122


State 88

   66 expr: expr '*' • expr

    T_id      shift, and go to state 21
    T_const   shift, and go to state 41
    T_charra  shift, and go to state 42
    T_charr   shift, and go to state 43
    T_string  shift, and go to state 22
    '+'       shift, and go to state 44
    '-'       shift, and go to state 45
    '('       shift, and go to state 51

    func-call  go to state 47
    l-value    go to state 48
    expr       go to state 123


State 89

   71 cond: cond "and" • cond

    "not"     shift, and go to state 40
    T_id      shift, and go to state 21
    T_const   shift, and go to state 41
    T_charra  shift, and go to state 42
    T_charr   shift, and go to state 43
    T_string  shift, and go to state 22
    '+'       shift, and go to state 44
    '-'       shift, and go to state 45
    '('       shift, and go to state 46

    func-call  go to state 47
    l-value    go to state 48
    expr       go to state 49
    cond       go to state 124


State 90

   72 cond: cond "or" • cond

    "not"     shift, and go to state 40
    T_id      shift, and go to state 21
    T_const   shift, and go to state 41
    T_charra  shift, and go to state 42
    T_charr   shift, and go to state 43
    T_string  shift, and go to state 22
    '+'       shift, and go to state 44
    '-'       shift, and go to state 45
    '('       shift, and go to state 46

    func-call  go to state 47
    l-value    go to state 48
    expr       go to state 49
    cond       go to state 125


State 91

   39 stmt: "if" cond "then" • stmt
   40     | "if" cond "then" • stmt "else" stmt

    "if"      shift, and go to state 18
    "return"  shift, and go to state 19
    "while"   shift, and go to state 20
    T_id      shift, and go to state 21
    T_string  shift, and go to state 22
    ';'       shift, and go to state 23
    '{'       shift, and go to state 8

    stmt       go to state 126
    block      go to state 26
    func-call  go to state 28
    l-value    go to state 29


State 92

   60 expr: '(' expr • ')'
   64     | expr • '+' expr
   65     | expr • '-' expr
   66     | expr • '*' expr
   67     | expr • "div" expr
   68     | expr • "mod" expr

    "div"  shift, and go to state 78
    "mod"  shift, and go to state 79
    '+'    shift, and go to state 86
    '-'    shift, and go to state 87
    '*'    shift, and go to state 88
    ')'    shift, and go to state 111


State 93

   43 stmt: "return" expr ';' •

    $default  reduce using rule 43 (stmt)


State 94

   41 stmt: "while" cond "do" • stmt

    "if"      shift, and go to state 18
    "return"  shift, and go to state 19
    "while"   shift, and go to state 20
    T_id      shift, and go to state 21
    T_string  shift, and go to state 22
    ';'       shift, and go to state 23
    '{'       shift, and go to state 8

    stmt       go to state 127
    block      go to state 26
    func-call  go to state 28
    l-value    go to state 29


State 95

   48 func-call: T_id '(' ')' •

    $default  reduce using rule 48 (func-call)


State 96

   49 func-call: T_id '(' expr • komma ')'
   50          | T_id '(' expr • ')'
   64 expr: expr • '+' expr
   65     | expr • '-' expr
   66     | expr • '*' expr
   67     | expr • "div" expr
   68     | expr • "mod" expr

    "div"  shift, and go to state 78
    "mod"  shift, and go to state 79
    '+'    shift, and go to state 86
    '-'    shift, and go to state 87
    '*'    shift, and go to state 88
    ')'    shift, and go to state 128
    ','    shift, and go to state 129

    komma  go to state 130


State 97

   36 stmt: l-value "<-" expr • ';'
   64 expr: expr • '+' expr
   65     | expr • '-' expr
   66     | expr • '*' expr
   67     | expr • "div" expr
   68     | expr • "mod" expr

    "div"  shift, and go to state 78
    "mod"  shift, and go to state 79
    '+'    shift, and go to state 86
    '-'    shift, and go to state 87
    '*'    shift, and go to state 88
    ';'    shift, and go to state 131


State 98

   55 l-value: l-value '[' expr • ']'
   64 expr: expr • '+' expr
   65     | expr • '-' expr
   66     | expr • '*' expr
   67     | expr • "div" expr
   68     | expr • "mod" expr

    "div"  shift, and go to state 78
    "mod"  shift, and go to state 79
    '+'    shift, and go to state 86
    '-'    shift, and go to state 87
    '*'    shift, and go to state 88
    ']'    shift, and go to state 132


State 99

   15 fpar-def: "ref" T_id ':' • fpar-type ';' fpar-def
   16         | "ref" T_id ':' • fpar-type

    "char"     shift, and go to state 66
    "int"      shift, and go to state 67
    "nothing"  shift, and go to state 68

    data-type  go to state 101
    fpar-type  go to state 133


State 100

   17 fpar-def: "ref" T_id new-def • ':' fpar-type ';' fpar-def
   18         | "ref" T_id new-def • ':' fpar-type

    ':'  shift, and go to state 134


State 101

   28 fpar-type: data-type • '[' ']' box
   29          | data-type • '[' ']'
   30          | data-type • box
   31          | data-type •

    '['  shift, and go to state 135

    $default  reduce using rule 31 (fpar-type)

    box  go to state 136


State 102

   11 fpar-def: T_id ':' fpar-type • ';' fpar-def
   12         | T_id ':' fpar-type •

    ';'  shift, and go to state 137

    $default  reduce using rule 12 (fpar-def)


State 103

   13 fpar-def: T_id new-def ':' • fpar-type ';' fpar-def
   14         | T_id new-def ':' • fpar-type

    "char"     shift, and go to state 66
    "int"      shift, and go to state 67
    "nothing"  shift, and go to state 68

    data-type  go to state 101
    fpar-type  go to state 138


State 104

    9 header: "fun" T_id '(' ')' ':' data-type •

    $default  reduce using rule 9 (header)


State 105

   10 header: "fun" T_id '(' fpar-def ')' ':' • data-type

    "char"     shift, and go to state 66
    "int"      shift, and go to state 67
    "nothing"  shift, and go to state 68

    data-type  go to state 139


State 106

   26 box: '[' • T_const ']' box
   27    | '[' • T_const ']'

    T_const  shift, and go to state 140


State 107

   24 declaration: data-type box •

    $default  reduce using rule 24 (declaration)


State 108

   34 var-def: "var" T_id ':' declaration ';' •

    $default  reduce using rule 34 (var-def)


State 109

   20 new-def: ',' T_id new-def •

    $default  reduce using rule 20 (new-def)


State 110

   33 var-def: "var" T_id new-def ':' declaration • ';'

    ';'  shift, and go to state 141


State 111

   60 expr: '(' expr ')' •

    $default  reduce using rule 60 (expr)


State 112

   69 cond: '(' cond ')' •

    $default  reduce using rule 69 (cond)


State 113

   64 expr: expr • '+' expr
   65     | expr • '-' expr
   66     | expr • '*' expr
   67     | expr • "div" expr
   67     | expr "div" expr •
   68     | expr • "mod" expr

    $default  reduce using rule 67 (expr)


State 114

   64 expr: expr • '+' expr
   65     | expr • '-' expr
   66     | expr • '*' expr
   67     | expr • "div" expr
   68     | expr • "mod" expr
   68     | expr "mod" expr •

    $default  reduce using rule 68 (expr)


State 115

   64 expr: expr • '+' expr
   65     | expr • '-' expr
   66     | expr • '*' expr
   67     | expr • "div" expr
   68     | expr • "mod" expr
   77 cond: expr "<=" expr •

    "div"  shift, and go to state 78
    "mod"  shift, and go to state 79
    '+'    shift, and go to state 86
    '-'    shift, and go to state 87
    '*'    shift, and go to state 88

    $default  reduce using rule 77 (cond)


State 116

   64 expr: expr • '+' expr
   65     | expr • '-' expr
   66     | expr • '*' expr
   67     | expr • "div" expr
   68     | expr • "mod" expr
   78 cond: expr ">=" expr •

    "div"  shift, and go to state 78
    "mod"  shift, and go to state 79
    '+'    shift, and go to state 86
    '-'    shift, and go to state 87
    '*'    shift, and go to state 88

    $default  reduce using rule 78 (cond)


State 117

   64 expr: expr • '+' expr
   65     | expr • '-' expr
   66     | expr • '*' expr
   67     | expr • "div" expr
   68     | expr • "mod" expr
   73 cond: expr '=' expr •

    "div"  shift, and go to state 78
    "mod"  shift, and go to state 79
    '+'    shift, and go to state 86
    '-'    shift, and go to state 87
    '*'    shift, and go to state 88

    $default  reduce using rule 73 (cond)


State 118

   64 expr: expr • '+' expr
   65     | expr • '-' expr
   66     | expr • '*' expr
   67     | expr • "div" expr
   68     | expr • "mod" expr
   74 cond: expr '#' expr •

    "div"  shift, and go to state 78
    "mod"  shift, and go to state 79
    '+'    shift, and go to state 86
    '-'    shift, and go to state 87
    '*'    shift, and go to state 88

    $default  reduce using rule 74 (cond)


State 119

   64 expr: expr • '+' expr
   65     | expr • '-' expr
   66     | expr • '*' expr
   67     | expr • "div" expr
   68     | expr • "mod" expr
   76 cond: expr '>' expr •

    "div"  shift, and go to state 78
    "mod"  shift, and go to state 79
    '+'    shift, and go to state 86
    '-'    shift, and go to state 87
    '*'    shift, and go to state 88

    $default  reduce using rule 76 (cond)


State 120

   64 expr: expr • '+' expr
   65     | expr • '-' expr
   66     | expr • '*' expr
   67     | expr • "div" expr
   68     | expr • "mod" expr
   75 cond: expr '<' expr •

    "div"  shift, and go to state 78
    "mod"  shift, and go to state 79
    '+'    shift, and go to state 86
    '-'    shift, and go to state 87
    '*'    shift, and go to state 88

    $default  reduce using rule 75 (cond)


State 121

   64 expr: expr • '+' expr
   64     | expr '+' expr •
   65     | expr • '-' expr
   66     | expr • '*' expr
   67     | expr • "div" expr
   68     | expr • "mod" expr

    "div"  shift, and go to state 78
    "mod"  shift, and go to state 79
    '*'    shift, and go to state 88

    $default  reduce using rule 64 (expr)


State 122

   64 expr: expr • '+' expr
   65     | expr • '-' expr
   65     | expr '-' expr •
   66     | expr • '*' expr
   67     | expr • "div" expr
   68     | expr • "mod" expr

    "div"  shift, and go to state 78
    "mod"  shift, and go to state 79
    '*'    shift, and go to state 88

    $default  reduce using rule 65 (expr)


State 123

   64 expr: expr • '+' expr
   65     | expr • '-' expr
   66     | expr • '*' expr
   66     | expr '*' expr •
   67     | expr • "div" expr
   68     | expr • "mod" expr

    $default  reduce using rule 66 (expr)


State 124

   71 cond: cond • "and" cond
   71     | cond "and" cond •
   72     | cond • "or" cond

    $default  reduce using rule 71 (cond)


State 125

   71 cond: cond • "and" cond
   72     | cond • "or" cond
   72     | cond "or" cond •

    $default  reduce using rule 72 (cond)


State 126

   39 stmt: "if" cond "then" stmt •
   40     | "if" cond "then" stmt • "else" stmt

    "else"  shift, and go to state 142

    "else"    [reduce using rule 39 (stmt)]
    $default  reduce using rule 39 (stmt)


State 127

   41 stmt: "while" cond "do" stmt •

    $default  reduce using rule 41 (stmt)


State 128

   50 func-call: T_id '(' expr ')' •

    $default  reduce using rule 50 (func-call)


State 129

   51 komma: ',' • expr
   52      | ',' • expr komma

    T_id      shift, and go to state 21
    T_const   shift, and go to state 41
    T_charra  shift, and go to state 42
    T_charr   shift, and go to state 43
    T_string  shift, and go to state 22
    '+'       shift, and go to state 44
    '-'       shift, and go to state 45
    '('       shift, and go to state 51

    func-call  go to state 47
    l-value    go to state 48
    expr       go to state 143


State 130

   49 func-call: T_id '(' expr komma • ')'

    ')'  shift, and go to state 144


State 131

   36 stmt: l-value "<-" expr ';' •

    $default  reduce using rule 36 (stmt)


State 132

   55 l-value: l-value '[' expr ']' •

    $default  reduce using rule 55 (l-value)


State 133

   15 fpar-def: "ref" T_id ':' fpar-type • ';' fpar-def
   16         | "ref" T_id ':' fpar-type •

    ';'  shift, and go to state 145

    $default  reduce using rule 16 (fpar-def)


State 134

   17 fpar-def: "ref" T_id new-def ':' • fpar-type ';' fpar-def
   18         | "ref" T_id new-def ':' • fpar-type

    "char"     shift, and go to state 66
    "int"      shift, and go to state 67
    "nothing"  shift, and go to state 68

    data-type  go to state 101
    fpar-type  go to state 146


State 135

   26 box: '[' • T_const ']' box
   27    | '[' • T_const ']'
   28 fpar-type: data-type '[' • ']' box
   29          | data-type '[' • ']'

    T_const  shift, and go to state 140
    ']'      shift, and go to state 147


State 136

   30 fpar-type: data-type box •

    $default  reduce using rule 30 (fpar-type)


State 137

   11 fpar-def: T_id ':' fpar-type ';' • fpar-def

    "ref"  shift, and go to state 33
    T_id   shift, and go to state 34

    fpar-def  go to state 148


State 138

   13 fpar-def: T_id new-def ':' fpar-type • ';' fpar-def
   14         | T_id new-def ':' fpar-type •

    ';'  shift, and go to state 149

    $default  reduce using rule 14 (fpar-def)


State 139

   10 header: "fun" T_id '(' fpar-def ')' ':' data-type •

    $default  reduce using rule 10 (header)


State 140

   26 box: '[' T_const • ']' box
   27    | '[' T_const • ']'

    ']'  shift, and go to state 150


State 141

   33 var-def: "var" T_id new-def ':' declaration ';' •

    $default  reduce using rule 33 (var-def)


State 142

   40 stmt: "if" cond "then" stmt "else" • stmt

    "if"      shift, and go to state 18
    "return"  shift, and go to state 19
    "while"   shift, and go to state 20
    T_id      shift, and go to state 21
    T_string  shift, and go to state 22
    ';'       shift, and go to state 23
    '{'       shift, and go to state 8

    stmt       go to state 151
    block      go to state 26
    func-call  go to state 28
    l-value    go to state 29


State 143

   51 komma: ',' expr •
   52      | ',' expr • komma
   64 expr: expr • '+' expr
   65     | expr • '-' expr
   66     | expr • '*' expr
   67     | expr • "div" expr
   68     | expr • "mod" expr

    "div"  shift, and go to state 78
    "mod"  shift, and go to state 79
    '+'    shift, and go to state 86
    '-'    shift, and go to state 87
    '*'    shift, and go to state 88
    ','    shift, and go to state 129

    $default  reduce using rule 51 (komma)

    komma  go to state 152


State 144

   49 func-call: T_id '(' expr komma ')' •

    $default  reduce using rule 49 (func-call)


State 145

   15 fpar-def: "ref" T_id ':' fpar-type ';' • fpar-def

    "ref"  shift, and go to state 33
    T_id   shift, and go to state 34

    fpar-def  go to state 153


State 146

   17 fpar-def: "ref" T_id new-def ':' fpar-type • ';' fpar-def
   18         | "ref" T_id new-def ':' fpar-type •

    ';'  shift, and go to state 154

    $default  reduce using rule 18 (fpar-def)


State 147

   28 fpar-type: data-type '[' ']' • box
   29          | data-type '[' ']' •

    '['  shift, and go to state 106

    $default  reduce using rule 29 (fpar-type)

    box  go to state 155


State 148

   11 fpar-def: T_id ':' fpar-type ';' fpar-def •

    $default  reduce using rule 11 (fpar-def)


State 149

   13 fpar-def: T_id new-def ':' fpar-type ';' • fpar-def

    "ref"  shift, and go to state 33
    T_id   shift, and go to state 34

    fpar-def  go to state 156


State 150

   26 box: '[' T_const ']' • box
   27    | '[' T_const ']' •

    '['  shift, and go to state 106

    $default  reduce using rule 27 (box)

    box  go to state 157


State 151

   40 stmt: "if" cond "then" stmt "else" stmt •

    $default  reduce using rule 40 (stmt)


State 152

   52 komma: ',' expr komma •

    $default  reduce using rule 52 (komma)


State 153

   15 fpar-def: "ref" T_id ':' fpar-type ';' fpar-def •

    $default  reduce using rule 15 (fpar-def)


State 154

   17 fpar-def: "ref" T_id new-def ':' fpar-type ';' • fpar-def

    "ref"  shift, and go to state 33
    T_id   shift, and go to state 34

    fpar-def  go to state 158


State 155

   28 fpar-type: data-type '[' ']' box •

    $default  reduce using rule 28 (fpar-type)


State 156

   13 fpar-def: T_id new-def ':' fpar-type ';' fpar-def •

    $default  reduce using rule 13 (fpar-def)


State 157

   26 box: '[' T_const ']' box •

    $default  reduce using rule 26 (box)


State 158

   17 fpar-def: "ref" T_id new-def ':' fpar-type ';' fpar-def •

    $default  reduce using rule 17 (fpar-def)
