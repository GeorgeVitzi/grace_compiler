State 127 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: ε
    2        | func-def

    3 func-def: header local-deff block
    4         | header block

    5 local-deff: local-def
    6           | local-deff local-def

    7 header: "fun" T_id '(' ')' ':' ret-type
    8       | "fun" T_id '(' fpar-def ')' ':' ret-type

    9 fpar-def: T_id ':' fpar-type
   10         | T_id ':' fpar-type ';' fpar-def
   11         | T_id fapar-def ':' fpar-type
   12         | T_id fapar-def ':' fpar-type ';' fpar-def
   13         | "ref" T_id ':' fpar-type
   14         | "ref" T_id ':' fpar-type ';' fpar-def
   15         | "ref" T_id fapar-def ':' fpar-type
   16         | "ref" T_id fapar-def ':' fpar-type ';' fpar-def

   17 fapar-def: ',' T_id
   18          | ',' T_id fapar-def

   19 data-type: "int"
   20          | "char"

   21 type: data-type typee
   22     | data-type

   23 typee: '[' T_inter ']' typee
   24      | '[' T_inter ']'

   25 ret-type: data-type
   26         | "nothing"

   27 fpar-type: data-type '[' ']' typee
   28          | data-type '[' ']'
   29          | data-type typee
   30          | data-type

   31 local-def: func-def
   32          | func-decl
   33          | var-def

   34 func-decl: header ';'

   35 var-def: "var" T_id fapar-def ':' type ';'
   36        | "var" T_id ':' type ';'

   37 stmt: ';'
   38     | l-value "<-" expr ';'
   39     | block
   40     | func-call ';'
   41     | "if" cond "then" stmt
   42     | "if" cond "then" stmt "else" stmt
   43     | "while" cond "do" stmt
   44     | "return" ';'
   45     | "return" expr ';'

   46 block: '{' sol '}'
   47      | '{' '}'

   48 sol: stmt
   49    | sol stmt

   50 func-call: T_id '(' ')'
   51          | T_id '(' expr vitzilante ')'
   52          | T_id '(' expr ')'

   53 vitzilante: ',' expr
   54           | ',' expr vitzilante

   55 l-value: T_id
   56        | T_string
   57        | l-value '[' expr ']'

   58 expr: T_inter
   59     | T_charr
   60     | T_const
   61     | l-value
   62     | '(' expr ')'
   63     | '+' expr
   64     | '-' expr
   65     | func-call
   66     | expr '+' expr
   67     | expr '-' expr
   68     | expr '*' expr
   69     | expr "div" expr
   70     | expr "mod" expr

   71 cond: '(' cond ')'
   72     | "not" cond
   73     | cond "and" cond
   74     | cond "or" cond
   75     | expr '=' expr
   76     | expr '#' expr
   77     | expr '<' expr
   78     | expr '>' expr
   79     | expr "<=" expr
   80     | expr ">=" expr


Terminals, with rules where they appear

    $end (0) 0
    '#' (35) 76
    '(' (40) 7 8 50 51 52 62 71
    ')' (41) 7 8 50 51 52 62 71
    '*' (42) 68
    '+' (43) 63 66
    ',' (44) 17 18 53 54
    '-' (45) 64 67
    ':' (58) 7 8 9 10 11 12 13 14 15 16 35 36
    ';' (59) 10 12 14 16 34 35 36 37 38 40 44 45
    '<' (60) 77
    '=' (61) 75
    '>' (62) 78
    '[' (91) 23 24 27 28 57
    ']' (93) 23 24 27 28 57
    '{' (123) 46 47
    '}' (125) 46 47
    error (256)
    "and" (258) 73
    "char" (259) 20
    "div" (260) 69
    "do" (261) 43
    "else" (262) 42
    "fun" (263) 7 8
    "if" (264) 41 42
    "int" (265) 19
    "mod" (266) 70
    "not" (267) 72
    "nothing" (268) 26
    "or" (269) 74
    "ref" (270) 13 14 15 16
    "return" (271) 44 45
    "then" (272) 41 42
    "var" (273) 35 36
    "while" (274) 43
    "<-" (275) 38
    "<=" (276) 79
    ">=" (277) 80
    T_id (278) 7 8 9 10 11 12 13 14 15 16 17 18 35 36 50 51 52 55
    T_inter (279) 23 24 58
    T_const (280) 60
    T_charr (281) 59
    T_string (282) 56


Nonterminals, with rules where they appear

    $accept (44)
        on left: 0
    program (45)
        on left: 1 2
        on right: 0
    func-def (46)
        on left: 3 4
        on right: 2 31
    local-deff (47)
        on left: 5 6
        on right: 3 6
    header (48)
        on left: 7 8
        on right: 3 4 34
    fpar-def (49)
        on left: 9 10 11 12 13 14 15 16
        on right: 8 10 12 14 16
    fapar-def (50)
        on left: 17 18
        on right: 11 12 15 16 18 35
    data-type (51)
        on left: 19 20
        on right: 21 22 25 27 28 29 30
    type (52)
        on left: 21 22
        on right: 35 36
    typee (53)
        on left: 23 24
        on right: 21 23 27 29
    ret-type (54)
        on left: 25 26
        on right: 7 8
    fpar-type (55)
        on left: 27 28 29 30
        on right: 9 10 11 12 13 14 15 16
    local-def (56)
        on left: 31 32 33
        on right: 5 6
    func-decl (57)
        on left: 34
        on right: 32
    var-def (58)
        on left: 35 36
        on right: 33
    stmt (59)
        on left: 37 38 39 40 41 42 43 44 45
        on right: 41 42 43 48 49
    block (60)
        on left: 46 47
        on right: 3 4 39
    sol (61)
        on left: 48 49
        on right: 46 49
    func-call (62)
        on left: 50 51 52
        on right: 40 65
    vitzilante (63)
        on left: 53 54
        on right: 51 54
    l-value (64)
        on left: 55 56 57
        on right: 38 57 61
    expr (65)
        on left: 58 59 60 61 62 63 64 65 66 67 68 69 70
        on right: 38 45 51 52 53 54 57 62 63 64 66 67 68 69 70 75 76 77 78 79 80
    cond (66)
        on left: 71 72 73 74 75 76 77 78 79 80
        on right: 41 42 43 71 72 73 74


State 0

    0 $accept: • program $end

    "fun"  shift, and go to state 1

    $default  reduce using rule 1 (program)

    program   go to state 2
    func-def  go to state 3
    header    go to state 4


State 1

    7 header: "fun" • T_id '(' ')' ':' ret-type
    8       | "fun" • T_id '(' fpar-def ')' ':' ret-type

    T_id  shift, and go to state 5


State 2

    0 $accept: program • $end

    $end  shift, and go to state 6


State 3

    2 program: func-def •

    $default  reduce using rule 2 (program)


State 4

    3 func-def: header • local-deff block
    4         | header • block

    "fun"  shift, and go to state 1
    "var"  shift, and go to state 7
    '{'    shift, and go to state 8

    func-def    go to state 9
    local-deff  go to state 10
    header      go to state 11
    local-def   go to state 12
    func-decl   go to state 13
    var-def     go to state 14
    block       go to state 15


State 5

    7 header: "fun" T_id • '(' ')' ':' ret-type
    8       | "fun" T_id • '(' fpar-def ')' ':' ret-type

    '('  shift, and go to state 16


State 6

    0 $accept: program $end •

    $default  accept


State 7

   35 var-def: "var" • T_id fapar-def ':' type ';'
   36        | "var" • T_id ':' type ';'

    T_id  shift, and go to state 17


State 8

   46 block: '{' • sol '}'
   47      | '{' • '}'

    "if"      shift, and go to state 18
    "return"  shift, and go to state 19
    "while"   shift, and go to state 20
    T_id      shift, and go to state 21
    T_string  shift, and go to state 22
    ';'       shift, and go to state 23
    '{'       shift, and go to state 8
    '}'       shift, and go to state 24

    stmt       go to state 25
    block      go to state 26
    sol        go to state 27
    func-call  go to state 28
    l-value    go to state 29


State 9

   31 local-def: func-def •

    $default  reduce using rule 31 (local-def)


State 10

    3 func-def: header local-deff • block
    6 local-deff: local-deff • local-def

    "fun"  shift, and go to state 1
    "var"  shift, and go to state 7
    '{'    shift, and go to state 8

    func-def   go to state 9
    header     go to state 11
    local-def  go to state 30
    func-decl  go to state 13
    var-def    go to state 14
    block      go to state 31


State 11

    3 func-def: header • local-deff block
    4         | header • block
   34 func-decl: header • ';'

    "fun"  shift, and go to state 1
    "var"  shift, and go to state 7
    ';'    shift, and go to state 32
    '{'    shift, and go to state 8

    func-def    go to state 9
    local-deff  go to state 10
    header      go to state 11
    local-def   go to state 12
    func-decl   go to state 13
    var-def     go to state 14
    block       go to state 15


State 12

    5 local-deff: local-def •

    $default  reduce using rule 5 (local-deff)


State 13

   32 local-def: func-decl •

    $default  reduce using rule 32 (local-def)


State 14

   33 local-def: var-def •

    $default  reduce using rule 33 (local-def)


State 15

    4 func-def: header block •

    $default  reduce using rule 4 (func-def)


State 16

    7 header: "fun" T_id '(' • ')' ':' ret-type
    8       | "fun" T_id '(' • fpar-def ')' ':' ret-type

    "ref"  shift, and go to state 33
    T_id   shift, and go to state 34
    ')'    shift, and go to state 35

    fpar-def  go to state 36


State 17

   35 var-def: "var" T_id • fapar-def ':' type ';'
   36        | "var" T_id • ':' type ';'

    ':'  shift, and go to state 37
    ','  shift, and go to state 38

    fapar-def  go to state 39


State 18

   41 stmt: "if" • cond "then" stmt
   42     | "if" • cond "then" stmt "else" stmt

    "not"     shift, and go to state 40
    T_id      shift, and go to state 21
    T_inter   shift, and go to state 41
    T_const   shift, and go to state 42
    T_charr   shift, and go to state 43
    T_string  shift, and go to state 22
    '+'       shift, and go to state 44
    '-'       shift, and go to state 45
    '('       shift, and go to state 46

    func-call  go to state 47
    l-value    go to state 48
    expr       go to state 49
    cond       go to state 50


State 19

   44 stmt: "return" • ';'
   45     | "return" • expr ';'

    T_id      shift, and go to state 21
    T_inter   shift, and go to state 41
    T_const   shift, and go to state 42
    T_charr   shift, and go to state 43
    T_string  shift, and go to state 22
    '+'       shift, and go to state 44
    '-'       shift, and go to state 45
    '('       shift, and go to state 51
    ';'       shift, and go to state 52

    func-call  go to state 47
    l-value    go to state 48
    expr       go to state 53


State 20

   43 stmt: "while" • cond "do" stmt

    "not"     shift, and go to state 40
    T_id      shift, and go to state 21
    T_inter   shift, and go to state 41
    T_const   shift, and go to state 42
    T_charr   shift, and go to state 43
    T_string  shift, and go to state 22
    '+'       shift, and go to state 44
    '-'       shift, and go to state 45
    '('       shift, and go to state 46

    func-call  go to state 47
    l-value    go to state 48
    expr       go to state 49
    cond       go to state 54


State 21

   50 func-call: T_id • '(' ')'
   51          | T_id • '(' expr vitzilante ')'
   52          | T_id • '(' expr ')'
   55 l-value: T_id •

    '('  shift, and go to state 55

    $default  reduce using rule 55 (l-value)


State 22

   56 l-value: T_string •

    $default  reduce using rule 56 (l-value)


State 23

   37 stmt: ';' •

    $default  reduce using rule 37 (stmt)


State 24

   47 block: '{' '}' •

    $default  reduce using rule 47 (block)


State 25

   48 sol: stmt •

    $default  reduce using rule 48 (sol)


State 26

   39 stmt: block •

    $default  reduce using rule 39 (stmt)


State 27

   46 block: '{' sol • '}'
   49 sol: sol • stmt

    "if"      shift, and go to state 18
    "return"  shift, and go to state 19
    "while"   shift, and go to state 20
    T_id      shift, and go to state 21
    T_string  shift, and go to state 22
    ';'       shift, and go to state 23
    '{'       shift, and go to state 8
    '}'       shift, and go to state 56

    stmt       go to state 57
    block      go to state 26
    func-call  go to state 28
    l-value    go to state 29


State 28

   40 stmt: func-call • ';'

    ';'  shift, and go to state 58


State 29

   38 stmt: l-value • "<-" expr ';'
   57 l-value: l-value • '[' expr ']'

    "<-"  shift, and go to state 59
    '['   shift, and go to state 60


State 30

    6 local-deff: local-deff local-def •

    $default  reduce using rule 6 (local-deff)


State 31

    3 func-def: header local-deff block •

    $default  reduce using rule 3 (func-def)


State 32

   34 func-decl: header ';' •

    $default  reduce using rule 34 (func-decl)


State 33

   13 fpar-def: "ref" • T_id ':' fpar-type
   14         | "ref" • T_id ':' fpar-type ';' fpar-def
   15         | "ref" • T_id fapar-def ':' fpar-type
   16         | "ref" • T_id fapar-def ':' fpar-type ';' fpar-def

    T_id  shift, and go to state 61


State 34

    9 fpar-def: T_id • ':' fpar-type
   10         | T_id • ':' fpar-type ';' fpar-def
   11         | T_id • fapar-def ':' fpar-type
   12         | T_id • fapar-def ':' fpar-type ';' fpar-def

    ':'  shift, and go to state 62
    ','  shift, and go to state 38

    fapar-def  go to state 63


State 35

    7 header: "fun" T_id '(' ')' • ':' ret-type

    ':'  shift, and go to state 64


State 36

    8 header: "fun" T_id '(' fpar-def • ')' ':' ret-type

    ')'  shift, and go to state 65


State 37

   36 var-def: "var" T_id ':' • type ';'

    "char"  shift, and go to state 66
    "int"   shift, and go to state 67

    data-type  go to state 68
    type       go to state 69


State 38

   17 fapar-def: ',' • T_id
   18          | ',' • T_id fapar-def

    T_id  shift, and go to state 70


State 39

   35 var-def: "var" T_id fapar-def • ':' type ';'

    ':'  shift, and go to state 71


State 40

   72 cond: "not" • cond

    "not"     shift, and go to state 40
    T_id      shift, and go to state 21
    T_inter   shift, and go to state 41
    T_const   shift, and go to state 42
    T_charr   shift, and go to state 43
    T_string  shift, and go to state 22
    '+'       shift, and go to state 44
    '-'       shift, and go to state 45
    '('       shift, and go to state 46

    func-call  go to state 47
    l-value    go to state 48
    expr       go to state 49
    cond       go to state 72


State 41

   58 expr: T_inter •

    $default  reduce using rule 58 (expr)


State 42

   60 expr: T_const •

    $default  reduce using rule 60 (expr)


State 43

   59 expr: T_charr •

    $default  reduce using rule 59 (expr)


State 44

   63 expr: '+' • expr

    T_id      shift, and go to state 21
    T_inter   shift, and go to state 41
    T_const   shift, and go to state 42
    T_charr   shift, and go to state 43
    T_string  shift, and go to state 22
    '+'       shift, and go to state 44
    '-'       shift, and go to state 45
    '('       shift, and go to state 51

    func-call  go to state 47
    l-value    go to state 48
    expr       go to state 73


State 45

   64 expr: '-' • expr

    T_id      shift, and go to state 21
    T_inter   shift, and go to state 41
    T_const   shift, and go to state 42
    T_charr   shift, and go to state 43
    T_string  shift, and go to state 22
    '+'       shift, and go to state 44
    '-'       shift, and go to state 45
    '('       shift, and go to state 51

    func-call  go to state 47
    l-value    go to state 48
    expr       go to state 74


State 46

   62 expr: '(' • expr ')'
   71 cond: '(' • cond ')'

    "not"     shift, and go to state 40
    T_id      shift, and go to state 21
    T_inter   shift, and go to state 41
    T_const   shift, and go to state 42
    T_charr   shift, and go to state 43
    T_string  shift, and go to state 22
    '+'       shift, and go to state 44
    '-'       shift, and go to state 45
    '('       shift, and go to state 46

    func-call  go to state 47
    l-value    go to state 48
    expr       go to state 75
    cond       go to state 76


State 47

   65 expr: func-call •

    $default  reduce using rule 65 (expr)


State 48

   57 l-value: l-value • '[' expr ']'
   61 expr: l-value •

    '['  shift, and go to state 60

    $default  reduce using rule 61 (expr)


State 49

   66 expr: expr • '+' expr
   67     | expr • '-' expr
   68     | expr • '*' expr
   69     | expr • "div" expr
   70     | expr • "mod" expr
   75 cond: expr • '=' expr
   76     | expr • '#' expr
   77     | expr • '<' expr
   78     | expr • '>' expr
   79     | expr • "<=" expr
   80     | expr • ">=" expr

    "div"  shift, and go to state 77
    "mod"  shift, and go to state 78
    "<="   shift, and go to state 79
    ">="   shift, and go to state 80
    '='    shift, and go to state 81
    '#'    shift, and go to state 82
    '>'    shift, and go to state 83
    '<'    shift, and go to state 84
    '+'    shift, and go to state 85
    '-'    shift, and go to state 86
    '*'    shift, and go to state 87


State 50

   41 stmt: "if" cond • "then" stmt
   42     | "if" cond • "then" stmt "else" stmt
   73 cond: cond • "and" cond
   74     | cond • "or" cond

    "and"   shift, and go to state 88
    "or"    shift, and go to state 89
    "then"  shift, and go to state 90


State 51

   62 expr: '(' • expr ')'

    T_id      shift, and go to state 21
    T_inter   shift, and go to state 41
    T_const   shift, and go to state 42
    T_charr   shift, and go to state 43
    T_string  shift, and go to state 22
    '+'       shift, and go to state 44
    '-'       shift, and go to state 45
    '('       shift, and go to state 51

    func-call  go to state 47
    l-value    go to state 48
    expr       go to state 91


State 52

   44 stmt: "return" ';' •

    $default  reduce using rule 44 (stmt)


State 53

   45 stmt: "return" expr • ';'
   66 expr: expr • '+' expr
   67     | expr • '-' expr
   68     | expr • '*' expr
   69     | expr • "div" expr
   70     | expr • "mod" expr

    "div"  shift, and go to state 77
    "mod"  shift, and go to state 78
    '+'    shift, and go to state 85
    '-'    shift, and go to state 86
    '*'    shift, and go to state 87
    ';'    shift, and go to state 92


State 54

   43 stmt: "while" cond • "do" stmt
   73 cond: cond • "and" cond
   74     | cond • "or" cond

    "and"  shift, and go to state 88
    "do"   shift, and go to state 93
    "or"   shift, and go to state 89


State 55

   50 func-call: T_id '(' • ')'
   51          | T_id '(' • expr vitzilante ')'
   52          | T_id '(' • expr ')'

    T_id      shift, and go to state 21
    T_inter   shift, and go to state 41
    T_const   shift, and go to state 42
    T_charr   shift, and go to state 43
    T_string  shift, and go to state 22
    '+'       shift, and go to state 44
    '-'       shift, and go to state 45
    '('       shift, and go to state 51
    ')'       shift, and go to state 94

    func-call  go to state 47
    l-value    go to state 48
    expr       go to state 95


State 56

   46 block: '{' sol '}' •

    $default  reduce using rule 46 (block)


State 57

   49 sol: sol stmt •

    $default  reduce using rule 49 (sol)


State 58

   40 stmt: func-call ';' •

    $default  reduce using rule 40 (stmt)


State 59

   38 stmt: l-value "<-" • expr ';'

    T_id      shift, and go to state 21
    T_inter   shift, and go to state 41
    T_const   shift, and go to state 42
    T_charr   shift, and go to state 43
    T_string  shift, and go to state 22
    '+'       shift, and go to state 44
    '-'       shift, and go to state 45
    '('       shift, and go to state 51

    func-call  go to state 47
    l-value    go to state 48
    expr       go to state 96


State 60

   57 l-value: l-value '[' • expr ']'

    T_id      shift, and go to state 21
    T_inter   shift, and go to state 41
    T_const   shift, and go to state 42
    T_charr   shift, and go to state 43
    T_string  shift, and go to state 22
    '+'       shift, and go to state 44
    '-'       shift, and go to state 45
    '('       shift, and go to state 51

    func-call  go to state 47
    l-value    go to state 48
    expr       go to state 97


State 61

   13 fpar-def: "ref" T_id • ':' fpar-type
   14         | "ref" T_id • ':' fpar-type ';' fpar-def
   15         | "ref" T_id • fapar-def ':' fpar-type
   16         | "ref" T_id • fapar-def ':' fpar-type ';' fpar-def

    ':'  shift, and go to state 98
    ','  shift, and go to state 38

    fapar-def  go to state 99


State 62

    9 fpar-def: T_id ':' • fpar-type
   10         | T_id ':' • fpar-type ';' fpar-def

    "char"  shift, and go to state 66
    "int"   shift, and go to state 67

    data-type  go to state 100
    fpar-type  go to state 101


State 63

   11 fpar-def: T_id fapar-def • ':' fpar-type
   12         | T_id fapar-def • ':' fpar-type ';' fpar-def

    ':'  shift, and go to state 102


State 64

    7 header: "fun" T_id '(' ')' ':' • ret-type

    "char"     shift, and go to state 66
    "int"      shift, and go to state 67
    "nothing"  shift, and go to state 103

    data-type  go to state 104
    ret-type   go to state 105


State 65

    8 header: "fun" T_id '(' fpar-def ')' • ':' ret-type

    ':'  shift, and go to state 106


State 66

   20 data-type: "char" •

    $default  reduce using rule 20 (data-type)


State 67

   19 data-type: "int" •

    $default  reduce using rule 19 (data-type)


State 68

   21 type: data-type • typee
   22     | data-type •

    '['  shift, and go to state 107

    $default  reduce using rule 22 (type)

    typee  go to state 108


State 69

   36 var-def: "var" T_id ':' type • ';'

    ';'  shift, and go to state 109


State 70

   17 fapar-def: ',' T_id •
   18          | ',' T_id • fapar-def

    ','  shift, and go to state 38

    $default  reduce using rule 17 (fapar-def)

    fapar-def  go to state 110


State 71

   35 var-def: "var" T_id fapar-def ':' • type ';'

    "char"  shift, and go to state 66
    "int"   shift, and go to state 67

    data-type  go to state 68
    type       go to state 111


State 72

   72 cond: "not" cond •
   73     | cond • "and" cond
   74     | cond • "or" cond

    $default  reduce using rule 72 (cond)


State 73

   63 expr: '+' expr •
   66     | expr • '+' expr
   67     | expr • '-' expr
   68     | expr • '*' expr
   69     | expr • "div" expr
   70     | expr • "mod" expr

    "div"  shift, and go to state 77
    "mod"  shift, and go to state 78
    '*'    shift, and go to state 87

    $default  reduce using rule 63 (expr)


State 74

   64 expr: '-' expr •
   66     | expr • '+' expr
   67     | expr • '-' expr
   68     | expr • '*' expr
   69     | expr • "div" expr
   70     | expr • "mod" expr

    "div"  shift, and go to state 77
    "mod"  shift, and go to state 78
    '*'    shift, and go to state 87

    $default  reduce using rule 64 (expr)


State 75

   62 expr: '(' expr • ')'
   66     | expr • '+' expr
   67     | expr • '-' expr
   68     | expr • '*' expr
   69     | expr • "div" expr
   70     | expr • "mod" expr
   75 cond: expr • '=' expr
   76     | expr • '#' expr
   77     | expr • '<' expr
   78     | expr • '>' expr
   79     | expr • "<=" expr
   80     | expr • ">=" expr

    "div"  shift, and go to state 77
    "mod"  shift, and go to state 78
    "<="   shift, and go to state 79
    ">="   shift, and go to state 80
    '='    shift, and go to state 81
    '#'    shift, and go to state 82
    '>'    shift, and go to state 83
    '<'    shift, and go to state 84
    '+'    shift, and go to state 85
    '-'    shift, and go to state 86
    '*'    shift, and go to state 87
    ')'    shift, and go to state 112


State 76

   71 cond: '(' cond • ')'
   73     | cond • "and" cond
   74     | cond • "or" cond

    "and"  shift, and go to state 88
    "or"   shift, and go to state 89
    ')'    shift, and go to state 113


State 77

   69 expr: expr "div" • expr

    T_id      shift, and go to state 21
    T_inter   shift, and go to state 41
    T_const   shift, and go to state 42
    T_charr   shift, and go to state 43
    T_string  shift, and go to state 22
    '+'       shift, and go to state 44
    '-'       shift, and go to state 45
    '('       shift, and go to state 51

    func-call  go to state 47
    l-value    go to state 48
    expr       go to state 114


State 78

   70 expr: expr "mod" • expr

    T_id      shift, and go to state 21
    T_inter   shift, and go to state 41
    T_const   shift, and go to state 42
    T_charr   shift, and go to state 43
    T_string  shift, and go to state 22
    '+'       shift, and go to state 44
    '-'       shift, and go to state 45
    '('       shift, and go to state 51

    func-call  go to state 47
    l-value    go to state 48
    expr       go to state 115


State 79

   79 cond: expr "<=" • expr

    T_id      shift, and go to state 21
    T_inter   shift, and go to state 41
    T_const   shift, and go to state 42
    T_charr   shift, and go to state 43
    T_string  shift, and go to state 22
    '+'       shift, and go to state 44
    '-'       shift, and go to state 45
    '('       shift, and go to state 51

    func-call  go to state 47
    l-value    go to state 48
    expr       go to state 116


State 80

   80 cond: expr ">=" • expr

    T_id      shift, and go to state 21
    T_inter   shift, and go to state 41
    T_const   shift, and go to state 42
    T_charr   shift, and go to state 43
    T_string  shift, and go to state 22
    '+'       shift, and go to state 44
    '-'       shift, and go to state 45
    '('       shift, and go to state 51

    func-call  go to state 47
    l-value    go to state 48
    expr       go to state 117


State 81

   75 cond: expr '=' • expr

    T_id      shift, and go to state 21
    T_inter   shift, and go to state 41
    T_const   shift, and go to state 42
    T_charr   shift, and go to state 43
    T_string  shift, and go to state 22
    '+'       shift, and go to state 44
    '-'       shift, and go to state 45
    '('       shift, and go to state 51

    func-call  go to state 47
    l-value    go to state 48
    expr       go to state 118


State 82

   76 cond: expr '#' • expr

    T_id      shift, and go to state 21
    T_inter   shift, and go to state 41
    T_const   shift, and go to state 42
    T_charr   shift, and go to state 43
    T_string  shift, and go to state 22
    '+'       shift, and go to state 44
    '-'       shift, and go to state 45
    '('       shift, and go to state 51

    func-call  go to state 47
    l-value    go to state 48
    expr       go to state 119


State 83

   78 cond: expr '>' • expr

    T_id      shift, and go to state 21
    T_inter   shift, and go to state 41
    T_const   shift, and go to state 42
    T_charr   shift, and go to state 43
    T_string  shift, and go to state 22
    '+'       shift, and go to state 44
    '-'       shift, and go to state 45
    '('       shift, and go to state 51

    func-call  go to state 47
    l-value    go to state 48
    expr       go to state 120


State 84

   77 cond: expr '<' • expr

    T_id      shift, and go to state 21
    T_inter   shift, and go to state 41
    T_const   shift, and go to state 42
    T_charr   shift, and go to state 43
    T_string  shift, and go to state 22
    '+'       shift, and go to state 44
    '-'       shift, and go to state 45
    '('       shift, and go to state 51

    func-call  go to state 47
    l-value    go to state 48
    expr       go to state 121


State 85

   66 expr: expr '+' • expr

    T_id      shift, and go to state 21
    T_inter   shift, and go to state 41
    T_const   shift, and go to state 42
    T_charr   shift, and go to state 43
    T_string  shift, and go to state 22
    '+'       shift, and go to state 44
    '-'       shift, and go to state 45
    '('       shift, and go to state 51

    func-call  go to state 47
    l-value    go to state 48
    expr       go to state 122


State 86

   67 expr: expr '-' • expr

    T_id      shift, and go to state 21
    T_inter   shift, and go to state 41
    T_const   shift, and go to state 42
    T_charr   shift, and go to state 43
    T_string  shift, and go to state 22
    '+'       shift, and go to state 44
    '-'       shift, and go to state 45
    '('       shift, and go to state 51

    func-call  go to state 47
    l-value    go to state 48
    expr       go to state 123


State 87

   68 expr: expr '*' • expr

    T_id      shift, and go to state 21
    T_inter   shift, and go to state 41
    T_const   shift, and go to state 42
    T_charr   shift, and go to state 43
    T_string  shift, and go to state 22
    '+'       shift, and go to state 44
    '-'       shift, and go to state 45
    '('       shift, and go to state 51

    func-call  go to state 47
    l-value    go to state 48
    expr       go to state 124


State 88

   73 cond: cond "and" • cond

    "not"     shift, and go to state 40
    T_id      shift, and go to state 21
    T_inter   shift, and go to state 41
    T_const   shift, and go to state 42
    T_charr   shift, and go to state 43
    T_string  shift, and go to state 22
    '+'       shift, and go to state 44
    '-'       shift, and go to state 45
    '('       shift, and go to state 46

    func-call  go to state 47
    l-value    go to state 48
    expr       go to state 49
    cond       go to state 125


State 89

   74 cond: cond "or" • cond

    "not"     shift, and go to state 40
    T_id      shift, and go to state 21
    T_inter   shift, and go to state 41
    T_const   shift, and go to state 42
    T_charr   shift, and go to state 43
    T_string  shift, and go to state 22
    '+'       shift, and go to state 44
    '-'       shift, and go to state 45
    '('       shift, and go to state 46

    func-call  go to state 47
    l-value    go to state 48
    expr       go to state 49
    cond       go to state 126


State 90

   41 stmt: "if" cond "then" • stmt
   42     | "if" cond "then" • stmt "else" stmt

    "if"      shift, and go to state 18
    "return"  shift, and go to state 19
    "while"   shift, and go to state 20
    T_id      shift, and go to state 21
    T_string  shift, and go to state 22
    ';'       shift, and go to state 23
    '{'       shift, and go to state 8

    stmt       go to state 127
    block      go to state 26
    func-call  go to state 28
    l-value    go to state 29


State 91

   62 expr: '(' expr • ')'
   66     | expr • '+' expr
   67     | expr • '-' expr
   68     | expr • '*' expr
   69     | expr • "div" expr
   70     | expr • "mod" expr

    "div"  shift, and go to state 77
    "mod"  shift, and go to state 78
    '+'    shift, and go to state 85
    '-'    shift, and go to state 86
    '*'    shift, and go to state 87
    ')'    shift, and go to state 112


State 92

   45 stmt: "return" expr ';' •

    $default  reduce using rule 45 (stmt)


State 93

   43 stmt: "while" cond "do" • stmt

    "if"      shift, and go to state 18
    "return"  shift, and go to state 19
    "while"   shift, and go to state 20
    T_id      shift, and go to state 21
    T_string  shift, and go to state 22
    ';'       shift, and go to state 23
    '{'       shift, and go to state 8

    stmt       go to state 128
    block      go to state 26
    func-call  go to state 28
    l-value    go to state 29


State 94

   50 func-call: T_id '(' ')' •

    $default  reduce using rule 50 (func-call)


State 95

   51 func-call: T_id '(' expr • vitzilante ')'
   52          | T_id '(' expr • ')'
   66 expr: expr • '+' expr
   67     | expr • '-' expr
   68     | expr • '*' expr
   69     | expr • "div" expr
   70     | expr • "mod" expr

    "div"  shift, and go to state 77
    "mod"  shift, and go to state 78
    '+'    shift, and go to state 85
    '-'    shift, and go to state 86
    '*'    shift, and go to state 87
    ')'    shift, and go to state 129
    ','    shift, and go to state 130

    vitzilante  go to state 131


State 96

   38 stmt: l-value "<-" expr • ';'
   66 expr: expr • '+' expr
   67     | expr • '-' expr
   68     | expr • '*' expr
   69     | expr • "div" expr
   70     | expr • "mod" expr

    "div"  shift, and go to state 77
    "mod"  shift, and go to state 78
    '+'    shift, and go to state 85
    '-'    shift, and go to state 86
    '*'    shift, and go to state 87
    ';'    shift, and go to state 132


State 97

   57 l-value: l-value '[' expr • ']'
   66 expr: expr • '+' expr
   67     | expr • '-' expr
   68     | expr • '*' expr
   69     | expr • "div" expr
   70     | expr • "mod" expr

    "div"  shift, and go to state 77
    "mod"  shift, and go to state 78
    '+'    shift, and go to state 85
    '-'    shift, and go to state 86
    '*'    shift, and go to state 87
    ']'    shift, and go to state 133


State 98

   13 fpar-def: "ref" T_id ':' • fpar-type
   14         | "ref" T_id ':' • fpar-type ';' fpar-def

    "char"  shift, and go to state 66
    "int"   shift, and go to state 67

    data-type  go to state 100
    fpar-type  go to state 134


State 99

   15 fpar-def: "ref" T_id fapar-def • ':' fpar-type
   16         | "ref" T_id fapar-def • ':' fpar-type ';' fpar-def

    ':'  shift, and go to state 135


State 100

   27 fpar-type: data-type • '[' ']' typee
   28          | data-type • '[' ']'
   29          | data-type • typee
   30          | data-type •

    '['  shift, and go to state 136

    $default  reduce using rule 30 (fpar-type)

    typee  go to state 137


State 101

    9 fpar-def: T_id ':' fpar-type •
   10         | T_id ':' fpar-type • ';' fpar-def

    ';'  shift, and go to state 138

    $default  reduce using rule 9 (fpar-def)


State 102

   11 fpar-def: T_id fapar-def ':' • fpar-type
   12         | T_id fapar-def ':' • fpar-type ';' fpar-def

    "char"  shift, and go to state 66
    "int"   shift, and go to state 67

    data-type  go to state 100
    fpar-type  go to state 139


State 103

   26 ret-type: "nothing" •

    $default  reduce using rule 26 (ret-type)


State 104

   25 ret-type: data-type •

    $default  reduce using rule 25 (ret-type)


State 105

    7 header: "fun" T_id '(' ')' ':' ret-type •

    $default  reduce using rule 7 (header)


State 106

    8 header: "fun" T_id '(' fpar-def ')' ':' • ret-type

    "char"     shift, and go to state 66
    "int"      shift, and go to state 67
    "nothing"  shift, and go to state 103

    data-type  go to state 104
    ret-type   go to state 140


State 107

   23 typee: '[' • T_inter ']' typee
   24      | '[' • T_inter ']'

    T_inter  shift, and go to state 141


State 108

   21 type: data-type typee •

    $default  reduce using rule 21 (type)


State 109

   36 var-def: "var" T_id ':' type ';' •

    $default  reduce using rule 36 (var-def)


State 110

   18 fapar-def: ',' T_id fapar-def •

    $default  reduce using rule 18 (fapar-def)


State 111

   35 var-def: "var" T_id fapar-def ':' type • ';'

    ';'  shift, and go to state 142


State 112

   62 expr: '(' expr ')' •

    $default  reduce using rule 62 (expr)


State 113

   71 cond: '(' cond ')' •

    $default  reduce using rule 71 (cond)


State 114

   66 expr: expr • '+' expr
   67     | expr • '-' expr
   68     | expr • '*' expr
   69     | expr • "div" expr
   69     | expr "div" expr •
   70     | expr • "mod" expr

    $default  reduce using rule 69 (expr)


State 115

   66 expr: expr • '+' expr
   67     | expr • '-' expr
   68     | expr • '*' expr
   69     | expr • "div" expr
   70     | expr • "mod" expr
   70     | expr "mod" expr •

    $default  reduce using rule 70 (expr)


State 116

   66 expr: expr • '+' expr
   67     | expr • '-' expr
   68     | expr • '*' expr
   69     | expr • "div" expr
   70     | expr • "mod" expr
   79 cond: expr "<=" expr •

    "div"  shift, and go to state 77
    "mod"  shift, and go to state 78
    '+'    shift, and go to state 85
    '-'    shift, and go to state 86
    '*'    shift, and go to state 87

    $default  reduce using rule 79 (cond)


State 117

   66 expr: expr • '+' expr
   67     | expr • '-' expr
   68     | expr • '*' expr
   69     | expr • "div" expr
   70     | expr • "mod" expr
   80 cond: expr ">=" expr •

    "div"  shift, and go to state 77
    "mod"  shift, and go to state 78
    '+'    shift, and go to state 85
    '-'    shift, and go to state 86
    '*'    shift, and go to state 87

    $default  reduce using rule 80 (cond)


State 118

   66 expr: expr • '+' expr
   67     | expr • '-' expr
   68     | expr • '*' expr
   69     | expr • "div" expr
   70     | expr • "mod" expr
   75 cond: expr '=' expr •

    "div"  shift, and go to state 77
    "mod"  shift, and go to state 78
    '+'    shift, and go to state 85
    '-'    shift, and go to state 86
    '*'    shift, and go to state 87

    $default  reduce using rule 75 (cond)


State 119

   66 expr: expr • '+' expr
   67     | expr • '-' expr
   68     | expr • '*' expr
   69     | expr • "div" expr
   70     | expr • "mod" expr
   76 cond: expr '#' expr •

    "div"  shift, and go to state 77
    "mod"  shift, and go to state 78
    '+'    shift, and go to state 85
    '-'    shift, and go to state 86
    '*'    shift, and go to state 87

    $default  reduce using rule 76 (cond)


State 120

   66 expr: expr • '+' expr
   67     | expr • '-' expr
   68     | expr • '*' expr
   69     | expr • "div" expr
   70     | expr • "mod" expr
   78 cond: expr '>' expr •

    "div"  shift, and go to state 77
    "mod"  shift, and go to state 78
    '+'    shift, and go to state 85
    '-'    shift, and go to state 86
    '*'    shift, and go to state 87

    $default  reduce using rule 78 (cond)


State 121

   66 expr: expr • '+' expr
   67     | expr • '-' expr
   68     | expr • '*' expr
   69     | expr • "div" expr
   70     | expr • "mod" expr
   77 cond: expr '<' expr •

    "div"  shift, and go to state 77
    "mod"  shift, and go to state 78
    '+'    shift, and go to state 85
    '-'    shift, and go to state 86
    '*'    shift, and go to state 87

    $default  reduce using rule 77 (cond)


State 122

   66 expr: expr • '+' expr
   66     | expr '+' expr •
   67     | expr • '-' expr
   68     | expr • '*' expr
   69     | expr • "div" expr
   70     | expr • "mod" expr

    "div"  shift, and go to state 77
    "mod"  shift, and go to state 78
    '*'    shift, and go to state 87

    $default  reduce using rule 66 (expr)


State 123

   66 expr: expr • '+' expr
   67     | expr • '-' expr
   67     | expr '-' expr •
   68     | expr • '*' expr
   69     | expr • "div" expr
   70     | expr • "mod" expr

    "div"  shift, and go to state 77
    "mod"  shift, and go to state 78
    '*'    shift, and go to state 87

    $default  reduce using rule 67 (expr)


State 124

   66 expr: expr • '+' expr
   67     | expr • '-' expr
   68     | expr • '*' expr
   68     | expr '*' expr •
   69     | expr • "div" expr
   70     | expr • "mod" expr

    $default  reduce using rule 68 (expr)


State 125

   73 cond: cond • "and" cond
   73     | cond "and" cond •
   74     | cond • "or" cond

    $default  reduce using rule 73 (cond)


State 126

   73 cond: cond • "and" cond
   74     | cond • "or" cond
   74     | cond "or" cond •

    $default  reduce using rule 74 (cond)


State 127

   41 stmt: "if" cond "then" stmt •
   42     | "if" cond "then" stmt • "else" stmt

    "else"  shift, and go to state 143

    "else"    [reduce using rule 41 (stmt)]
    $default  reduce using rule 41 (stmt)


State 128

   43 stmt: "while" cond "do" stmt •

    $default  reduce using rule 43 (stmt)


State 129

   52 func-call: T_id '(' expr ')' •

    $default  reduce using rule 52 (func-call)


State 130

   53 vitzilante: ',' • expr
   54           | ',' • expr vitzilante

    T_id      shift, and go to state 21
    T_inter   shift, and go to state 41
    T_const   shift, and go to state 42
    T_charr   shift, and go to state 43
    T_string  shift, and go to state 22
    '+'       shift, and go to state 44
    '-'       shift, and go to state 45
    '('       shift, and go to state 51

    func-call  go to state 47
    l-value    go to state 48
    expr       go to state 144


State 131

   51 func-call: T_id '(' expr vitzilante • ')'

    ')'  shift, and go to state 145


State 132

   38 stmt: l-value "<-" expr ';' •

    $default  reduce using rule 38 (stmt)


State 133

   57 l-value: l-value '[' expr ']' •

    $default  reduce using rule 57 (l-value)


State 134

   13 fpar-def: "ref" T_id ':' fpar-type •
   14         | "ref" T_id ':' fpar-type • ';' fpar-def

    ';'  shift, and go to state 146

    $default  reduce using rule 13 (fpar-def)


State 135

   15 fpar-def: "ref" T_id fapar-def ':' • fpar-type
   16         | "ref" T_id fapar-def ':' • fpar-type ';' fpar-def

    "char"  shift, and go to state 66
    "int"   shift, and go to state 67

    data-type  go to state 100
    fpar-type  go to state 147


State 136

   23 typee: '[' • T_inter ']' typee
   24      | '[' • T_inter ']'
   27 fpar-type: data-type '[' • ']' typee
   28          | data-type '[' • ']'

    T_inter  shift, and go to state 141
    ']'      shift, and go to state 148


State 137

   29 fpar-type: data-type typee •

    $default  reduce using rule 29 (fpar-type)


State 138

   10 fpar-def: T_id ':' fpar-type ';' • fpar-def

    "ref"  shift, and go to state 33
    T_id   shift, and go to state 34

    fpar-def  go to state 149


State 139

   11 fpar-def: T_id fapar-def ':' fpar-type •
   12         | T_id fapar-def ':' fpar-type • ';' fpar-def

    ';'  shift, and go to state 150

    $default  reduce using rule 11 (fpar-def)


State 140

    8 header: "fun" T_id '(' fpar-def ')' ':' ret-type •

    $default  reduce using rule 8 (header)


State 141

   23 typee: '[' T_inter • ']' typee
   24      | '[' T_inter • ']'

    ']'  shift, and go to state 151


State 142

   35 var-def: "var" T_id fapar-def ':' type ';' •

    $default  reduce using rule 35 (var-def)


State 143

   42 stmt: "if" cond "then" stmt "else" • stmt

    "if"      shift, and go to state 18
    "return"  shift, and go to state 19
    "while"   shift, and go to state 20
    T_id      shift, and go to state 21
    T_string  shift, and go to state 22
    ';'       shift, and go to state 23
    '{'       shift, and go to state 8

    stmt       go to state 152
    block      go to state 26
    func-call  go to state 28
    l-value    go to state 29


State 144

   53 vitzilante: ',' expr •
   54           | ',' expr • vitzilante
   66 expr: expr • '+' expr
   67     | expr • '-' expr
   68     | expr • '*' expr
   69     | expr • "div" expr
   70     | expr • "mod" expr

    "div"  shift, and go to state 77
    "mod"  shift, and go to state 78
    '+'    shift, and go to state 85
    '-'    shift, and go to state 86
    '*'    shift, and go to state 87
    ','    shift, and go to state 130

    $default  reduce using rule 53 (vitzilante)

    vitzilante  go to state 153


State 145

   51 func-call: T_id '(' expr vitzilante ')' •

    $default  reduce using rule 51 (func-call)


State 146

   14 fpar-def: "ref" T_id ':' fpar-type ';' • fpar-def

    "ref"  shift, and go to state 33
    T_id   shift, and go to state 34

    fpar-def  go to state 154


State 147

   15 fpar-def: "ref" T_id fapar-def ':' fpar-type •
   16         | "ref" T_id fapar-def ':' fpar-type • ';' fpar-def

    ';'  shift, and go to state 155

    $default  reduce using rule 15 (fpar-def)


State 148

   27 fpar-type: data-type '[' ']' • typee
   28          | data-type '[' ']' •

    '['  shift, and go to state 107

    $default  reduce using rule 28 (fpar-type)

    typee  go to state 156


State 149

   10 fpar-def: T_id ':' fpar-type ';' fpar-def •

    $default  reduce using rule 10 (fpar-def)


State 150

   12 fpar-def: T_id fapar-def ':' fpar-type ';' • fpar-def

    "ref"  shift, and go to state 33
    T_id   shift, and go to state 34

    fpar-def  go to state 157


State 151

   23 typee: '[' T_inter ']' • typee
   24      | '[' T_inter ']' •

    '['  shift, and go to state 107

    $default  reduce using rule 24 (typee)

    typee  go to state 158


State 152

   42 stmt: "if" cond "then" stmt "else" stmt •

    $default  reduce using rule 42 (stmt)


State 153

   54 vitzilante: ',' expr vitzilante •

    $default  reduce using rule 54 (vitzilante)


State 154

   14 fpar-def: "ref" T_id ':' fpar-type ';' fpar-def •

    $default  reduce using rule 14 (fpar-def)


State 155

   16 fpar-def: "ref" T_id fapar-def ':' fpar-type ';' • fpar-def

    "ref"  shift, and go to state 33
    T_id   shift, and go to state 34

    fpar-def  go to state 159


State 156

   27 fpar-type: data-type '[' ']' typee •

    $default  reduce using rule 27 (fpar-type)


State 157

   12 fpar-def: T_id fapar-def ':' fpar-type ';' fpar-def •

    $default  reduce using rule 12 (fpar-def)


State 158

   23 typee: '[' T_inter ']' typee •

    $default  reduce using rule 23 (typee)


State 159

   16 fpar-def: "ref" T_id fapar-def ':' fpar-type ';' fpar-def •

    $default  reduce using rule 16 (fpar-def)
